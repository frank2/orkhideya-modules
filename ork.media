#!/bin/bash

source orkhideya
ork_include stdlib

function media_depends
{
    ork_path_check sha256sum sed grep egrep
    return $?
}

function media_root
{
    ork_configpath "media"
    return 0
}

function media_archive # the archive is for raw and meta data
{
    ork_pathcat "$(media_root)" "$ORK_MEDIA_ARCHIVE"
    return 0
}

function media_sentinels # sentinels are scripts related to organization
{
    ork_pathcat "$(media_root)" "$ORK_MEDIA_SENTINELS"
    return 0
}

function media_catacomb # the root location where sentinels should place organized links
{
    ork_pathcat "$(media_root)" "$ORK_MEDIA_CATACOMB"
}

function media_identity
{
    local _filename="$(realpath "$1")"
    local _last_file="$(echo "$_filename" | awk -F '/' '{ print $NF }')"
    local _identity=""
    local _alias="$2"

    if [ -z "$_alias" ]; then
        _alias="$(echo "$_filename" | sed -e 's,/$,,' | awk -F '/' '{ print $NF }')"
    fi

    if [ "$_filename" != "-" -a -d "$_filename" ]; then
        _identity="$(find -L "$_filename" -type f -exec echo "[${_alias}]" \&\& cat "{}" \; | sha256sum -b - | awk '{ print $1 }')"
        test -z "$_identity" && return 1
    elif [ "$_filename" == "-" -o -r "$_filename" ]; then
        _identity="$(sha256sum -b "$_filename" | awk '{ print $1 }')"
        test -z "$_identity" && return 2
    else
        return 3
    fi

    if [ "$_filename" != '-' ]; then
        stdout_normal "Identity of $(stdout_color_wrap main-focused "$_last_file") is $(stdout_color_wrap attention "$_identity")."
    fi

    echo "$_identity"
    return 0
}

function media_identity_verify
{
    local _identity="$1"
    test -z "$_identity" && return 1

    local _filename="$2"
    ! test -r "$_filename" && return 2

    local _alias="$(media_metadata_get "$_identity" alias)"
    local _verify="$(media_identity "$_filename" "$_alias")"
    
    if [ "$_verify" != "$_identity" ]; then
        stdout_error "The identity did not verify. The media may have been modified."
        return 3
    fi

    return 0
}

function media_identity_path
{
    local _identity="$1"
    test -z "$_identity" && return 1

    echo "${_identity:0:1}/${_identity:1:2}/$_identity"
    return 0
}

function media_shelf
{
    local _identity="$1"
    test -z "$_identity" && return 1

    ork_pathcat "$(media_archive)" "$(media_identity_path "$_identity")"
    return 0
}

function media_shelved
{
    local _identity="$1"
    test -z "$_identity" && return 1

    test -d "$(media_shelf "$_identity")" && return 0
    return 2
}

function media_metadata_file
{
    local _identity="$1"
    ! media_shelved "$_identity" && return 1

    ork_pathcat "$(media_shelf "$_identity")" metadata
    return 0
}

function media_metadata_set
{
    local _identity="$1"
    ! media_shelved "$_identity" && return 1

    local _metadata_file="$(media_metadata_file "$_identity")"

    if [ ! -e "$_metadata_file" ]; then
        touch "$_metadata_file"

        if [ "$?" != "0" ]; then
            return 2
        fi
    fi

    local _tag="$2"
    local _content="$3"

    grep -v "^${_tag}:" "$_metadata_file" > "${_metadata_file}.new"

    if [ -n "$_content" ]; then
        ! echo "${_tag}:${_content}" >> "${_metadata_file}.new" && return 4
    fi

    ! mv "${_metadata_file}.new" "$_metadata_file" && return 5
    return 0
}

function media_metadata_get
{
    local _identity="$1"
    ! media_shelved "$_identity" && return 1

    local _tag="$2"
    test -z "$_tag" && return 2

    local _metadata_file="$(media_metadata_file "$_identity")"
    test ! -r "$_metadata_file" && return 3

    local _metadata_entry="$(grep "^${_tag}:" "$_metadata_file" | tail -n1)"
    test -z "$_metadata_entry" && return 4

    echo "$_metadata_entry" | sed -r -e "s,^${_tag}:,,"
    return 0
}

function media_metadata_list_token
{
    printf "$ORK_MEDIA_LIST_TOKEN"
}

function media_metadata_dataset_token
{
    printf "$ORK_MEDIA_DATASET_TOKEN"
}

function media_metadata_list_contract
{
    cat - | head -c -1 | tr "\n" "$ORK_MEDIA_LIST_TOKEN" 
    return 0
}

function media_metadata_dataset_contract
{
    cat - | head -c -1 | tr "\n" "$ORK_MEDIA_DATASET_TOKEN"
    return 0
}

function media_metadata_list_expand
{
    cat - | tr "$ORK_MEDIA_LIST_TOKEN" "\n"
    return 0
}

function media_metadata_dataset_expand
{
    cat - | tr "$ORK_MEDIA_DATASET_TOKEN" "\n"
    return 0
}

function media_metadata_list_append
{
    local _identity="$1"
    ! media_shelved "$_identity" && return 1

    local _tag="$2"
    test -z "$_tag" && return 2

    local _value="$3"
    test -z "$_value" && return 3

    local _current_list="$(media_metadata_get "$_identity" "$_tag")"

    if [ -z "$_current_list" ]; then
        media_metadata_set "$_identity" "$_tag" "$_value"
    else
        media_metadata_set "$_identity" "$_tag" "${_current_list}$(media_metadata_list_token)${_value}"
    fi
}

function media_metadata_list_remove
{
    local _identity="$1"
    ! media_shelved "$_identity" && return 1

    local _tag="$2"
    test -z "$_tag" && return 2

    local _value="$3"
    test -z "$_value" && return 3

    ! media_metadata_set "$_identity" "$_tag" "$(media_metadata_get "$_identity" "$_tag" | media_metadata_list_expand | egrep -v "^${_value}\$" | media_metadata_list_contract)" && return 4

    return 0
}

function media_metadata_list_contains
{
    local _identity="$1"
    ! media_shelved "$_identity" && return 1

    local _tag="$2"
    test -z "$_tag" && return 2

    local _value="$3"
    test -z "$(media_metadata_get "$_identity" "$_tag" | media_metadata_list_expand | egrep -o "^${_value}\$")" && return 3

    return 0
}

function media_metadata_dataset_append
{
    local _identity="$1"
    ! media_shelved "$_identity" && return 1

    local _tag="$2"
    test -z "$_tag" && return 2

    local _value="$3"
    test -z "$_value" && return 3

    local _current_list="$(media_metadata_get "$_identity" "$_tag")"

    if [ -z "$_current_list" ]; then
        media_metadata_set "$_identity" "$_tag" "$_value"
    else
        local _unique_list="$(echo "${_current_list}$(media_metadata_dataset_token)${_value}" | media_metadata_dataset_expand | sort -u | media_metadata_dataset_contract)"
        media_metadata_set "$_identity" "$_tag" "$_unique_list"
    fi
}

function media_metadata_dataset_remove
{
    local _identity="$1"
    ! media_shelved "$_identity" && return 1

    local _tag="$2"
    test -z "$_tag" && return 2

    local _value="$3"
    test -z "$_value" && return 3

    ! media_metadata_set "$_identity" "$_tag" "$(media_metadata_get "$_identity" "$_tag" | media_metadata_dataset_expand | egrep -v "^${_value}\$" | media_metadata_dataset_contract)" && return 4

    return 0
}

function media_metadata_dataset_contains
{
    local _identity="$1"
    ! media_shelved "$_identity" && return 1

    local _tag="$2"
    test -z "$_tag" && return 2

    local _value="$3"
    test -z "$(media_metadata_get "$_identity" "$_tag" | media_metadata_dataset_expand | egrep -o "^${_value}\$")" && return 3

    return 0
}

function media_vault_initialize
{
    local _identity="$1"
    test -z "$_identity" && return 1
    media_shelved "$_identity" && return 2

    local _filename="$(realpath "$2")"
    ! test -d "$_filename" && return 3

    local _err_on_exist="$3"
    local _vault_path="$(media_shelf "$_identity")"
    ! mkdir -p "$_vault_path" && return 4

    local _alias="$(echo "$_filename" | awk -F '/' '{ print $NF }')"

    media_metadata_set "$_identity" type vault
    media_metadata_set "$_identity" alias "$_alias"
    media_metadata_set "$_identity" mode "$(stat -c '%a' "$_filename")"

    local _vault_path="$(media_shelf "$_identity")"

    find -L "$_filename" -type f | while read _vault_file; do
        local _file_identity="$(media_identity "$_vault_file")"

        media_shelved "$_file_identity" && test -n "$_err_on_exist" && return 5

        local _last_file="$(echo "$_vault_file" | awk -F '/' '{ print $NF }')"
        local _relative_path="$(echo "$_vault_file" | sed -e "s,^${_filename}/,,")"

        if ! media_shelved "$_file_identity"; then
            ! media_content_initialize "$_file_identity" "$_vault_file" "$_identity" "$_relative_path" && return 6
        else
            ! media_content_add_vault "$_file_identity" "$_identity" "$_relative_path" && return 7
        fi
    done

    return 0
}

function media_vault_contains
{
    local _vault_identity="$1"
    ! media_shelved "$_vault_identity" && return 1

    local _file_identity="$2"
    ! media_shelved "$_file_identity" && return 2
    ! media_metadata_dataset_contains "$_vault_identity" vault.contents "$_file_identity" && return 3

    return 0
}

function media_vault_add_file
{
    local _vault_identity="$1"
    ! media_shelved "$_vault_identity" && return 1

    local _file_identity="$2"
    ! media_shelved "$_file_identity" && return 2
    
    ! media_metadata_dataset_append "$_vault_identity" vault.contents "$_file_identity" && return 3
    return 0
}

function media_vault_remove_file
{
    local _vault_identity="$1"
    ! media_shelved "$_vault_identity" && return 1

    local _file_identity="$2"
    ! media_shelved "$_file_identity" && return 2
    ! media_vault_contains "$_vault_identity" "$_file_identity" && return 3

    ! media_metadata_dataset_remove "$_vault_identity" vault.contents "$_file_identity" && return 4
    return 0
}

function media_vault_add_mapping
{
    local _vault_identity="$1"
    ! media_shelved "$_vault_identity" && return 1

    local _file_identity="$2"
    ! media_shelved "$_file_identity" && return 2
    ! media_vault_contains "$_vault_identity" "$_file_identity" && return 3

    local _mapping_value="$3"
    test -z "$_mapping_value" && return 3

    local _mapping_id="vault.mappings.${_file_identity}"
    ! media_metadata_dataset_append "$_vault_identity" "$_mapping_id" "$_mapping_value" && return 4

    return 0
}
 
function media_vault_remove_mapping
{
    local _vault_identity="$1"
    ! media_shelved "$_vault_identity" && return 1

    local _file_identity="$2"
    ! media_shelved "$_file_identity" && return 2
    ! media_vault_contains "$_vault_identity" "$_file_identity" && return 3

    local _mapping_value="$3"
    test -z "$_mapping_value" && return 3

    local _mapping_id="vault.mappings.${_file_identity}"
    ! media_metadata_dataset_remove "$_vault_identity" "$_mapping_id" "$_mapping_value" && return 4

    return 0
}

function media_vault_mappings_contains
{
    local _vault_identity="$1"
    ! media_shelved "$_vault_identity" && return 1

    local _file_identity="$2"
    ! media_shelved "$_file_identity" && return 2
    ! media_vault_contains "$_vault_identity" "$_file_identity" && return 3

    local _mapping_value="$3"
    test -z "$_mapping_value" && return 3

    local _mapping_id="vault.mappings.${_file_identity}"
    ! media_metadata_dataset_contains "$_vault_identity" "$_mapping_id" "$_mapping_value" && return 4

    return 0
}

function media_vault_export
{
    local _vault_identity="$1"
    ! media_shelved "$_vault_identity" && return 1

    local _export_directory="$(realpath "$2")"
    ! test -d "$_export_directory" && return 2

    local _export_links="$3"
    local _conclusive_directory="$_export_directory/$(media_metadata_get "$_vault_identity" alias)"
    ! mkdir -p "$_conclusive_directory" && return 3

    media_metadata_get "$_vault_identity" vault.contents | media_metadata_dataset_expand | while read _content_identity; do
        ! media_shelved "$_content_identity" && return 4

        local _content_file="$(media_shelf "$_content_identity")/file"
        ! test -r "$_content_file" && return 5

        local _content_mode="$(media_metadata_get "$_content_identity" mode)"
        test -z "$_content_mode" && return 6

        media_metadata_get "$_vault_identity" "vault.mappings.${_content_identity}" | media_metadata_dataset_expand | while read _content_mapping; do
            local _full_path="$(echo "$_content_mapping" | sed -e "s,^.,$_conclusive_directory,")"
            local _filename="$(echo "$_full_path" | awk -F '/' '{ print $NF }')"
            local _parent_path="$(echo "$_full_path" | sed -r -e "s,/${_filename}\$,,")"

            ! mkdir -p "$_parent_path" && return 7

            if [ -n "$_export_links" ]; then
                ! ln -s "$_content_file" "$_full_path" && return 8
            else
                ! cp "$_content_file" "$_full_path" && return 9
                ! chmod "$_content_mode" "$_full_path" && return 10
            fi
        done
    done

    return 0
}
 
function media_content_initialize
{
    local _file_identity="$1"
    test -z "$_file_identity" && return 1

    local _filename="$2"
    ! test -r "$_filename" && return 2

    local _vault_identity="$3"

    if [ -n "$_vault_identity" ]; then
        ! media_shelved "$_vault_identity" && return 3
    fi

    local _vault_root="$4"

    local _content_alias="$(echo "$_filename" | awk -F '/' '{ print $NF }')"
    local _content_shelf="$(media_shelf "$_file_identity")"
    ! mkdir -p "$_content_shelf" && return 5

    media_metadata_set "$_file_identity" type content
    media_metadata_set "$_file_identity" alias "$_content_alias"
    media_metadata_set "$_file_identity" mode "$(stat -c '%a' "$_filename")"
    media_metadata_set "$_file_identity" mime "$(file --mime-type "$_filename" | awk -F ':' '{ print $2 }' | cut -b 2-)"

    local _extension="$(echo "$_content_alias" | sed -r -e 's,^\.+,,' | awk -F '.' '{ print $NF }' | tr '[:upper:]' '[:lower:]')"

    if [ -n "$_extension" ]; then
        media_metadata_set "$_file_identity" extension "$_extension"
    fi

    local _content_file="$_content_shelf/file"
    ! cp "$_filename" "$_content_file" && return 6

    if [ -n "$_vault_identity" ]; then
        ! media_content_add_vault "$_file_identity" "$_vault_identity" "$_vault_root" && return 7
    fi

    ! chmod 440 "$_content_file" && return 7

    return 0
}

function media_content_add_vault
{
    local _file_identity="$1"
    ! media_shelved "$_file_identity" && return 1

    local _vault_identity="$2"
    ! media_shelved "$_vault_identity" && return 2

    local _relative_path="$3"
    ! media_vault_add_file "$_vault_identity" "$_file_identity" && return 3
    ! media_vault_add_mapping "$_vault_identity" "$_file_identity" "./${_relative_path}" && return 4

    return 0
}

function media_content_revoke_vault
{
    local _file_identity="$1"
    ! media_shelved "$_file_identity" && return 1

    local _vault_identity="$2"
    ! media_shelved "$_vault_identity" && return 2
    ! media_vault_contains "$_vault_identity" "$_file_identity" && return 3

    local _relative_path="$3"
    ! media_vault_mappings_contains "$_vault_identity" "$_file_identity" "$_relative_path" && return 4
    
    ! media_vault_remove_file "$_vault_identity" "$_file_identity" && return 5
    ! media_vault_remove_mapping "$_vault_identity" "$_file_identity" "$_relative_path" && return 6

    return 0
}

function media_sentinel_order
{
    local _order="$1"
    test -z "$_order" && return 1

    local _method_file="$(media_sentinels)/$(stdlib_pathify "$_order")/sentinel"
    ! test -x "$_method_file" && return 2

    ! "$_method_file" "${@:2}" && return 3
    return 0
 }

ORK_MEDIA_ARCHIVE="archive"
ORK_MEDIA_SENTINELS="sentinels"
ORK_MEDIA_CATACOMB="catacomb"
ORK_MEDIA_LIST_TOKEN="|"
ORK_MEDIA_DATASET_TOKEN="|"

ork_reconfigure media
