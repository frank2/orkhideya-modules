#!/bin/bash

source orkhideya
ork_include stdlib

function media_depends
{
    ork_path_check sha256sum flac lame
    return $?
}

function media_root
{
    ork_configpath "media"
    return 0
}

function media_library # the library is for metadata on archive data
{
    ork_pathcat "$(media_root)" "$ORK_MEDIA_LIBRARY"
    return 0
}

function media_archive # the archive is for raw data
{
    ork_pathcat "$(media_root)" "$ORK_MEDIA_ARCHIVE"
    return 0
}

function media_organization # the place for categorizing files
{
    ork_pathcat "$(media_root)" "$ORK_MEDIA_ORGANIZATION"
    return 0
}

function media_navigation # the place for finding files easily as a result of organization
{
    ork_pathcat "$(media_root)" "$ORK_MEDIA_NAVIGATION"
    return 0
}

function media_identity
{
    local _filename="$1"

    if [ "$_filename" != "-" -a -d "$_filename" ]; then
        find -L "$_filename" -type f | sort - | xargs cat | media_identity -
        return $?
    elif [ "$_filename" == "-" -o -r "$_filename" ]; then
        sha256sum "$_filename" | awk '{ print $1 }'
        return 0
    else
        return 1
    fi
}

function media_identity_path
{
    local _identity="$1"
    test -z "$_identity" && return 1

    echo "${_identity:0:1}/${_identity:1:2}/$_identity"
    return 0
}

function media_shelf
{
    local _identity="$1"
    test -z "$_identity" && return 1

    ork_pathcat "$(media_library)" "$(media_identity_path "$_identity")"
    return 0
}

function media_vault
{
    local _identity="$1"
    test -z "$_identity" && return 1

    ork_pathcat "$(media_archive)" "$(media_identity_path "$_identity")"
    return 0
}

function media_metadata_file
{
    local _identity="$1"
    test -z "$_identity" && return 1

    ork_pathcat "$(media_shelf "$_identity")" metadata
    return 0
}

function media_metadata_set
{
    local _identity="$1"
    test -z "$_identity" && return 1

    local _shelf="$(media_shelf "$_identity")"

    if [ ! -d "$_shelf" ]; then
        mkdir -p "$_shelf"

        if [ "$?" != "0" ]; then
            return 1
        fi
    fi

    local _metadata_file="$(media_metadata_file "$_identity")"

    if [ ! -e "$_metadata_file" ]; then
        touch "$_metadata_file"

        if [ "$?" != "0" ]; then
            return 2
        fi
    fi

    local _tag="$2"
    local _content="$3"

    grep -v "^${_tag}:" "$_metadata_file" > "${_metadata_file}.new"

    if [ -n "$_content" ]; then
        ! echo "${_tag}:${_content}" >> "${_metadata_file}.new" && return 4
    fi

    ! mv "${_metadata_file}.new" "$_metadata_file" && return 5
    return 0
}

function media_metadata_get
{
    local _identity="$1"
    test -z "$_identity" && return 1

    local _tag="$2"
    test -z "$_tag" && return 2

    local _metadata_file="$(media_metadata_file "$_identity")"
    test ! -r "$_metadata_file" && return 3

    local _metadata_entry="$(grep "^${_tag}:" "$_metadata_file" | tail -n1)"
    test -z "$_metadata_entry" && return 4

    echo "$_metadata_entry" | sed -r -e "s,^${_tag}:,,"
    return 0
}

function media_shelf_link
{
    local _identity="$1"
    test -z "$_identity" && return 1

    local _shelf_path="$(media_shelf "$_identity")"
    test ! -d "$_shelf_path" && return 2

    local _vault_identity="$(media_metadata_get "$_identity" vault)"
    test -z "$_vault_identity" && return 3

    local _vault_path="$(media_vault "$_vault_identity")"
    test ! -d "$_vault_path" && return 4

    local _relative_path="$(media_metadata_get "$_identity" relative_path)"
    local _full_path="$_vault_path/$_relative_path"
    test ! -e "$_full_path" && return 5

    local _link_file="$_shelf_path/link"

    if [ -L "$_link_file" ]; then
        ! unlink "$_link_file" && return 6
    fi

    ! ln -s "$_full_path" "$_link_file" && return 7
    return 0
}

function media_catalog
{
    local _filename="$1"
    test -z "$_filename" && return 1

    local _identity="$(media_identity "$_filename")"

    if [ -z "$_identity" ]; then
        return 2
    fi

    local _last_file="$(echo "$_filename" | awk -F '/' '{ print $NF }')"

    if [ -d "$_filename" ]; then
        local _vault_identity="$(media_vault "$_identity")"

        ! mkdir -p "$_vault_identity" && return 3
        ! mv "$_filename"/* "$_vault_identity" && return 4

        media_metadata_set "$_identity" type vault
        media_metadata_set "$_identity" alias "$_last_file"

        find -L "$_vault_identity" -type f | while read _catalog_file; do
            _file_identity="$(media_identity "$_catalog_file")"
            _relative_path="$(echo "$_catalog_file" | sed -r -e "s,^$_vault_identity/,,")"

            media_metadata_set "$_file_identity" type content
            media_metadata_set "$_file_identity" vault "$_identity"
            media_metadata_set "$_file_identity" relative_path "$_relative_path"

            ! media_catalog "$_catalog_file" && return 5
        done

        rm -rf "$_filename" &>/dev/null
        echo "$_identity"
        return 0
    elif [ -r "$_filename" ]; then
        local _file_vault="$(media_metadata_get "$_identity" vault)"
        local _vault_path=""

        if [ -z "$_file_vault" ]; then
            _vault_path="$(media_vault "$_identity")"
            test -d "$_vault_path" && return 6
            ! mkdir -p "$_vault_path" && return 7

            media_metadata_set "$_identity" type content
            media_metadata_set "$_identity" vault "$_identity"
            media_metadata_set "$_identity" relative_path "$_last_file"
            
            ! mv "$_filename" "$_vault_path/$_last_file" && return 8
        else
            _vault_path="$(media_vault "$_file_vault")"
        fi

        local _relative_path="$(media_metadata_get "$_identity" relative_path)"

        ! chmod a-w "$_vault_path/$_relative_path" && return 10
        media_shelf_link "$_identity"

        echo "$_identity"
        return 0
    else
        return 11
    fi
}

function media_organize
{
    local _identity="$1"
    test -z "$_identity" && return 1

    local _method="$2"
    test -z "$_method" && return 2

    local _class="$(media_metadata_get "$_identity" class)"
    test -z "$_class" && return 2

    local _subclass="$_class"
    local _organized="3"

    while [ -n "$_subclass" ]; do
        local _class_path="$(stdlib_pathify "$_subclass")"
        local _class_file="$(media_organization)/$_class_path/$_method"

        if [ -x "$_class_file" ]; then
            "$_class_file" "$_identity"
            _organized="$?"

            if [ "$_organized" == "0" ]; then
                break
            else
                _organized="3"
            fi
        fi

        local _last_class="$(echo "$_subclass" | awk -F '.' '{ print $NF }')"
        
        if [ "$_last_class" == "$_subclass" ]; then
            _subclass=""
        else
            _subclass="$(echo "$_subclass" | sed -e "s,\\.$_last_class\$,,")"
        fi
    done

    if [ "$_organized" != "0" -a -x "$(media_organization)/$_method" ]; then
        "$(media_organization)/$_method" "$_identity"
        _organized="$?"
    fi

    return "$_organized"
}

ORK_MEDIA_LIBRARY="library"
ORK_MEDIA_ARCHIVE="archive"
ORK_MEDIA_ORGANIZATION="organization"
ORK_MEDIA_NAVIGATION="navigation"

ork_reconfigure media
