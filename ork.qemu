#!/bin/bash

source orkhideya
ork_include if
ork_include proc
ork_include stdlib

function qemu_label
{
   local _machine="$1"

   echo "qemu-$_machine"
   return 0
}

function qemu_root
{
   ork_configpath "qemu"
   return 0
}

function qemu_img_root
{
   ork_pathcat "$(qemu_root)" "$ORK_QEMU_IMG_PATH"
   return 0
}

function qemu_vm_root
{
   ork_pathcat "$(qemu_root)" "$ORK_QEMU_VM_PATH"
   return 0
}

function qemu_img_path
{
   local _image="$1"
   ork_pathcat "$(qemu_img_root)" "$(stdlib_pathify "$_image")"
   return $?
}

function qemu_vm_path
{
   local _vm="$1"
   ork_pathcat "$(qemu_vm_root)" "$(stdlib_pathify "$_vm")"
   return $?
}

function qemu_img_file
{
   local _image="$1" 
   echo "$(qemu_img_path "$_image")/image"
   return 0
}

function qemu_img_exists
{
   local _image="$1"
   test -r "$(qemu_img_file "$_image")"
   return $?
}

function qemu_img_fork
{
   local _image="$1"
   ! qemu_img_exists "$_image" && return 1

   local _args="${@:2}"

   local _image_file="$(qemu_img_file "$_image")"

   qemu-img create -f qcow2 -b "$_image_file" $_args
   [ "$?" != "0" ] && return 3
   return 0
}

function qemu_img_mount
{
   local _image="$1"
   ! qemu_img_exists "$_image" && return 1

   local _mountpoint="$2"
   test -z "$_mountpoint" && return 2

   local _mount_args="${@:3}"
   local _image_file="$(qemu_img_file "$_image")"
   ! qemu_nbd_mount "$_image_file" "$_mountpoint" "$_mount_args" && return 3

   return 0
}

function qemu_img_create
{
   local _image="$1"
   qemu_img_exists "$_image" && return 1

   local _size="$2"
   local _image_file="$(qemu_img_file "$_image")"
   local _args="${@:3}"

   mkdir -p "$(qemu_img_path "$_image")" 2>/dev/null
   [ "$?" != "0" ] && return 3

   qemu-img create $_args "$_image_file" $_size
   [ "$?" != "0" ] && return 3
   return 0
}

function qemu_nbd_mount
{
   local _image_file="$1"
   ! test -r "$_image_file" && return 1

   local _mountpoint="$2"
   ! test -e "$_mountpoint" && ! mkdir -p "$_mountpoint" && return 2

   local _mount_args="${@:3}"
   local _current_socket="$(cat /proc/partitions | grep -o 'nbd[[:digit:]+]$' | sort -r | head -n1 | sed -e 's,^nbd,,')"

   if [ -z "$_current_socket" ]; then
      _current_socket="0"
   else
      _current_socket="$(($_current_socket+1))"
   fi

   local _nbd_socket="nbd${_current_socket}"
   local _nbd_device="/dev/$_nbd_socket"
   local _nbd_label="$(echo "$_nbd_device" | awk -F '/' '{ print $3 }')-mount"

   ! proc_label_spawn "$_nbd_label" qemu-nbd -c "$_nbd_device" "$_image_file" && return 3

   for _partition in $(cat /proc/partitions | grep -o "${_nbd_socket}p[[:digit:]+]$"); do
      _partition_value="$(echo $_partition | sed -e "s,^${_nbd_socket},,")"
      _partition_path="$_mountpoint/$_partition_value"
      mkdir -p "$_partition_path"
      stdout_warning "Mounting $(stdout_color_wrap main-focused "$_partition") to $(stdout_color_wrap main-focused "$_partition_path")."
      ! mount $_mount_args /dev/$_partition "$_partition_path" && return 4
      sleep 1
   done

   return 0
}

function qemu_nbd_unmount
{
   local _mountpoint="$1"
   ! test -e "$_mountpoint" && return 1

   local _mountpoint="$(realpath "$_mountpoint")"
   local _mount_device="$(mount | grep $_mountpoint | head -n1 | awk '{ print $1 }' | sed -e 's,p[[:digit:]+],,')"
   local _mount_label="$(echo $_mount_device | awk -F '/' '{ print $3 }')-mount"

   local _oldifs="$IFS"
   IFS="
"
   
   for _partition in $(mount | grep "^/dev/nbd[[:digit:]+]p[[:digit:]+] on $_mountpoint/p[[:digit:]+] type " | sed -e 's, on ,:,' -e 's, type ,:,'); do
      _partition_path="$(echo $_partition | awk -F ':' '{ print $2 }')"
      stdout_warning "Unmounting $(stdout_color_wrap main-focused "$_partition_path")."
      ! umount "$_partition_path" && return 2
      ! rm -r "$_partition_path" && return 3
   done

   IFS="$_oldifs"

   ! qemu-nbd -d "$_mount_device" && return 4
   ! proc_label_kill "$_mount_label" && return 5
   return 0
}

function qemu_vm_boot_file
{
   local _vm="$1" 
   echo "$(qemu_vm_path "$_vm")/boot"
   return 0
}

function qemu_vm_shutdown_file
{
   local _vm="$1" 
   echo "$(qemu_vm_path "$_vm")/shutdown"
   return 0
}

function qemu_vm_exists
{
   local _vm="$1"
   test -x "$(qemu_vm_path "$_vm")"
   return $?
}

function qemu_vm_boot
{
   local _vm="$1"
   ! qemu_vm_exists "$_vm" && return 1

   local _label="$2"
   local _args="${@:3}"
   local _boot_file="$(stdlib_filesearch "$(qemu_vm_root)" "$(stdlib_pathify "$_vm")" "boot")"
   [ -z "$_boot_file" ] && return 2
   [ ! -x "$_boot_file" ] && return 3
   ! "$_boot_file" "$_label" $_args && return 4

   return 0
}

function qemu_vm_shutdown
{
   local _vm="$1"
   ! qemu_vm_exists "$_vm" && return 1

   local _label="$2"
   local _args="${@:3}"
   local _shutdown_file="$(stdlib_filesearch "$(qemu_vm_root)" "$(stdlib_pathify "$_vm")" "shutdown")"
   [ -z "$_shutdown_file" ] && return 2
   [ ! -x "$_shutdown_file" ] && return 3
   ! "$_shutdown_file" "$_label" $_args && return 4

   return 0
}

function qemu_vm_monitor
{
   local _vm="$1"
   ! qemu_vm_exists "$_vm" && return 1

   local _label="$2"
   ! proc_label_exists "$_label" && return 3

   local _args="${@:3}"

   while proc_label_is_running "$_label"; do sleep 3; done
   ! qemu_vm_shutdown "$_vm" "$_label" $_args &>/dev/null && return 4 

   return 0
}

function qemu_arg_exists
{
   local _args="$1"
   local _arg="$2"

   test -n "$(echo "$_args" | egrep -o "([[:space:]]+-$_arg([[:space:]]+|,)|^-$_arg([[:space:]]+|,)|[[:space:]]+-$_arg\$)")"
   return $?
}

function qemu_arg_default
{
   local _args="$1"
   local _arg="$2"
   local _value="${@:3}"

   if ! qemu_arg_exists "$_args" "$_arg"; then
      if [ -z "$_value" ]; then echo "-$_arg"
      elif [ -n "$(echo "$_arg" | grep -o '[[:space:]]')" ]; then echo "-${_arg}${_value}"
      else echo "-$_arg "$_value""
      fi
   fi

   return 0
}

ORK_QEMU_IMG_PATH="img"
ORK_QEMU_VM_PATH="vm"
ORK_QEMU_VM_HOST="localhost"

ork_reconfigure "qemu"
