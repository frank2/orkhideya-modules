#!/bin/bash

source orkhideya
ork_include if
ork_include proc
ork_include stdlib

function bind_label
{
   local _interface="$1"

   echo "bind-$_interface"
   return 0
}

function bind_root
{
   ork_configpath "bind"
   return 0
}

function bind_config_root
{
   ork_pathcat "$(bind_root)" "$ORK_BIND_CONFIGS"
   return 0
}

function bind_zone_root
{
   ork_pathcat "$(ork_pathroot "tmp")" "bind" "$ORK_BIND_ZONES"
   return 0
}

function bind_config_file
{
   _config="$1"
   stdlib_filesearch "$(bind_config_root)" "$(stdlib_pathify "$_config")" "config"
   return 0
}

function bind_config_exists
{
   _config="$1"
   test -r "$(bind_config_file "$_config")"
   return $?
}

function bind_config_build
{
   local _config="$1"
   ! bind_config_exists "$_config" && return 1

   local _args="${@:2}"
   local _config_file="$(bind_config_file "$_config")"
   [ ! -e "$_config_file" ] && return 2
   [ ! -r "$_config_file" -o ! -x "$_config_file" ] && return 3

   if [ -x "$_config_file" ]; then 
      ! "$_config_file" $_args && return 4
   else
      ! cat "$_config_file" && return 5
   fi

   return 0
}

function bind_command
{
   local _interface="$1"
   ! if_interface_exists "$_interface" && return 1
   
   local _configfile="$2"
   [ ! -r "$_configfile" ] && return 2

   local _args="${@:3}"
   echo "named -c "$_configfile" $_args"
   return 0
}

function bind_start
{
   local _interface="$1"
   ! if_interface_exists "$_interface" && return 1

   local _config="$2"
   ! bind_config_exists "$_config" && return 2
   bind_is_running "$_interface" && return 0

   local _args="${@:3}"
   local _label="$(bind_label "$_interface")"
   local _configfile="$(stdlib_tmpfile "$_label-config")"

   ! bind_config_build "$_config" "$_interface" > "$_configfile" && return 3
   sed -i -e "s,options\s+{,options { pid-file \"$(proc_label_pid_file "$_label")\";," "$_configfile" # janky

   ! proc_label_spawn "$_label" "$(bind_command "$_interface" "$_configfile" $_args)" && return 6
   return 0
}

function bind_stop
{
   local _interface="$1"
   ! if_interface_exists "$_interface" && return 1 

   local _label="$(bind_label "$_interface")"
   local _configfile="$(stdlib_tmpfile "$_label-config")"

   ! proc_label_kill "$_label" && return 3

   shred -u "$_configfile" &>/dev/null
   return 0
}

function bind_is_running
{
   local _interface="$1"
   ! if_interface_exists "$_interface" && return 1

   local _label="$(bind_label "$_interface")"
   ! proc_label_is_running "$_label" && return 2
   return 0
}

ORK_BIND_CONFIGS="configs"
ORK_BIND_ZONES="zones"
