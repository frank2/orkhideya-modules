#!/bin/bash

source orkhideya
ork_include stdlib

function malware_root
{
   ork_configpath "malware"
   return 0
}

function malware_vault
{
   ork_pathcat "$(malware_root)" "$ORK_MALWARE_VAULT"
   return 0
}

function malware_sources
{
   ork_pathcat "$(malware_root)" "$ORK_MALWARE_SOURCES"
   return 0
}

function malware_analyses
{
   ork_pathcat "$(malware_root)" "$ORK_MALWARE_ANALYSIS"
   return 0
}

function malware_password
{
   echo "$ORK_MALWARE_PASSWORD"
   return 0
}

function malware_md5sum
{
   _filename="$1"
   [ ! -r "$_filename" ] && return 1

   md5sum "$_filename" | awk '{ print $1 }'
   return 0
}

function malware_sha1sum
{
   _filename="$1"
   [ ! -r "$_filename" ] && return 1

   sha1sum "$_filename" | awk '{ print $1 }'
   return 0
}

function malware_sha256sum
{
   _filename="$1"
   [ ! -r "$_filename" ] && return 1

   sha256sum "$_filename" | awk '{ print $1 }'
   return 0
}

function malware_classify
{
   _filename="$1"
   [ ! -r "$_filename" ] && return 1

   _mime="$(file --mime-type "$_filename" | awk -F ': ' '{ print $2 }' | awk -F '/' '{ print $2 }')"

   if [ -n "$(echo $_mime | grep excel$)" ]; then
      echo "xls"
   elif [ -n "$(echo $_mime | grep office$)" -o -n "$(echo $_mime | grep msword$)" ]; then
      echo "doc"
   elif [ -n "$(echo $_mime | grep powerpoint$)" ]; then
      echo "ppt"
   elif [ -n "$(echo $_mime | grep dosexec$)" -o -n "$(echo $_mime | grep octet-stream$)" ]; then
      echo "pe"
   elif [ -n "$(echo $_mime | grep pdf$)" ]; then
      echo "pdf"
   else
      echo "unclassified"
   fi

   return 0
}

function malware_class_extension
{
   local _class="$1"

   case "$_class" in 
      "pe")
         echo "exe"
         ;;
      "xls" | "doc" | "pdf" | "ppt")
         echo $_class
         ;;
      *)
         return 1
         ;;
   esac
   return 0
}

function malware_sample_source
{
   local _source="$1"

   echo "$(malware_sources)/$(stdlib_pathify "$_source")"
   return 0
}

function malware_sample_isolate
{
   local _source="$1"
   local _args="${@:2}"
   local _source_path="$(malware_sample_source "$_source")"

   [ ! -x "$_source_path/isolate" ] && return 1
   ! "$_source_path/isolate" $_args && return 3

   return 0
}

function malware_sample_search
{
   local _source="$1"
   local _args="${@:2}"
   local _source_path="$(malware_sample_source "$_source")"

   [ ! -x "$_source_path/search" ] && return 1
   ! "$_source_path/search" $_args && return 2

   return 0
}

function malware_sample_acquire
{
   local _source="$1"
   local _args="${@:2}"
   local _source_path="$(malware_sample_source "$_source")"

   [ ! -x "$_source_path/acquire" ] && return 1
   ! "$_source_path/acquire" $_args && return 3

   return 0
}

function malware_sample_extract
{
   local _source="$1"
   local _args="${@:2}"
   local _source_path="$(malware_sample_source "$_source")"

   [ ! -x "$_source_path/extract" ] && return 1
   ! "$_source_path/extract" $_args && return 2

   return 0
}

function malware_sample_associate
{
   local _sample="$1"
   local _analysis="$2"
   
   ! malware_sample_search vault "$_sample" && return 1

   local _analysis_path="$(malware_analysis_path "$_analysis")"

   if [ ! -d "$(malware_analysis_path "$_analysis")" ]; then
      local _locally_opened="0"
      _analysis_path="$(malware_analysis_open "$_analysis")"
      [ -z "$_analysis_path" -o ! -d "$_analysis_path" ] && return 3
   else
      local _locally_opened="1"
   fi

   local _sample_file="$_analysis_path/samples"

   echo "$_sample" >> "$_sample_file"
   sort -u -o "$_sample_file" "$_sample_file"

   if [ "$_locally_opened" == "0" ]; then
      ! malware_analysis_close "$_analysis" && return 4
   fi

   return 0
}

function malware_sample_disassociate
{
   local _sample="$1"
   local _analysis="$2"
   
   ! malware_sample_search vault "$_sample" && return 1

   if [ ! -d "$(malware_analysis_path "$_analysis")" ]; then
      local _locally_opened="0"
      local _analysis_path="$(malware_analysis_open "$_analysis")"
      [ -z "$_analysis_path" -o ! -d "$_analysis_path" ] && return 3
   else
      local _locally_opened="1"
      local _analysis_path="$(malware_analysis_path "$_analysis")"
   fi

   local _sample_file="$_analysis_path/samples"

   [ ! -e "$_sample_file" ] && return 0
   [ ! -r "$_sample_file" -o ! -w "$_sample_file" ] && return 4

   cat "$_sample_file" | grep -v "^$_sample\$" > "${_sample_file}.dis"
   mv "${_sample_file}.dis" "$_sample_file"

   if [ "$_locally_opened" == "0" ]; then
      ! malware_analysis_close "$_analysis" && return 5
   fi

   return 0
}

function malware_sample_classify
{
   local _sample="$1"
   
   ! malware_sample_search vault "$_sample" && return 1
   
   local _extracted="$(malware_sample_extract vault "$_sample")"
   [ -z "$_extracted" ] && return 2

   malware_classify "$_extracted"
   shred -u "$_extracted" &>/dev/null
   return 0
}

function malware_sample_extension
{
   local _sample="$1"
   local _class="$(malware_sample_classify "$_sample")"
   [ -z "$_class" ] && return 1

   malware_class_extension "$_class"
   [ "$?" != "0" ] && return 2

   return 0
}

function malware_analysis_path
{
   local _analysis="$1"

   echo "$(stdlib_tmpfile "malware-analysis-$_analysis")"
   return 0
}

function malware_analysis_archive_path
{
   local _analysis="$1"

   echo "$(malware_analyses)/$(stdlib_pathify "$_analysis")"
   return 0
}

function malware_analysis_samples
{
   local _analysis="$1"
   local _analysis_path="$(malware_analysis_path "$_analysis")"

   [ ! -d "$_analysis_path" ] && return 1
   [ ! -r "$_analysis_path/samples" ] && return 2
   cat "$_analysis_path/samples"

   return 0
}

function malware_analysis_create
{
   local _analysis="$1"
   local _analysis_path="$(malware_analysis_path "$_analysis")"
   [ -d "$_analysis_path" ] && return 1

   mkdir -p "$_analysis_path/data"
   touch "$_analysis_path/notes"

   echo "$_analysis_path"
   return 0
}

function malware_analysis_open
{
   local _analysis="$1"
   local _analysis_path="$(malware_analysis_path "$_analysis")"

   if [ -d "$_analysis_path" ]; then
      echo "$_analysis_path"
      return 0
   fi

   local _analysis_archive="$(malware_analysis_archive_path "$_analysis")/analysis.zip"
   [ ! -r "$_analysis_archive" ] && return 1
   ! unzip -P "$(malware_password)" -d "$_analysis_path" -u "$_analysis_archive" &>/dev/null && return 2

   chown -R $ORK_USER:$ORK_GROUP "$_analysis_path"
   echo "$_analysis_path"
   return 0
}

function malware_analysis_save
{
   local _analysis="$1"
   local _analysis_path="$(malware_analysis_path "$_analysis")"

   [ ! -d "$_analysis_path" ] && return 1

   local _analysis_archive_path="$(malware_analysis_archive_path "$_analysis")"
   local _analysis_archive_file="$_analysis_archive_path/analysis.zip"
   local _analysis_root="$(malware_analyses)"
   ! mkdir -p "$_analysis_archive_path" && return 2

   chown -R $ORK_USER:$ORK_GROUP "$_analysis_root/$(echo $_analysis | awk -F '.' '{ print $1 }')"
   [ -r "$_analysis_archive_file" ] && rm "$_analysis_archive_file" 

   pushd "$_analysis_path" &>/dev/null
   zip -r -P "$(malware_password)" "$_analysis_archive_file" ./* --exclude 'data/samples*' &>/dev/null
   local _zip_status="$?"

   popd &>/dev/null
   [ "$_zip_status" != "0" ] && return 3

   chown $ORK_USER:$ORK_GROUP "$_analysis_archive_file"
   return 0
}

function malware_analysis_close
{
   local _analysis="$1"
   local _analysis_path="$(malware_analysis_path "$_analysis")"

   [ ! -d "$_analysis_path" ] && return 1
   ! malware_analysis_save "$_analysis" && return 2
   ! rm -rf "$_analysis_path" && return 3
   return 0
}

function malware_analysis_resolve
{
   local _analysis="$1"
   local _analysis_path="$(malware_analysis_path "$_analysis")"
   [ ! -d "$_analysis_path" ] && return 1
   ! mkdir -p "$_analysis_path/data/samples" && return 2

   local _sample="$2"

   if [ -z "$_sample" ]; then
      for _sample in $(cat "$_analysis_path/samples"); do
         _target_file="$(malware_sample_extract vault "$_sample")"
         [ -z "$_target_file" -o ! -r "$_target_file" ] && return 3
         ! mv "$_target_file" "$_analysis_path/data/samples/$_sample" && return 4
      done
   else
      ! grep -q "$_sample" "$_analysis_path/samples" && return 5
      _target_file="$(malware_sample_extract vault "$_sample")"
      [ -z "$_target_file" -o ! -r "$_target_file" ] && return 6
      ! mv "$_target_file" "$_analysis_path/data/samples/$_sample" && return 7
   fi

   return 0
}

ORK_MALWARE_VAULT="vault"
ORK_MALWARE_SOURCES="sources"
ORK_MALWARE_ANALYSIS="analysis"
ORK_MALWARE_PASSWORD="infected"

ork_reconfigure malware
